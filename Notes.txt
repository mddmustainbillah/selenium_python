website link for practicing test automation: https://testautomationpractice.blogspot.com/

driver = webdriver.Chrome(executable_path="C:\Drivers\chromedriver_win32\chromedriver.exe")

driver.get("https://www.facebook.com/")

# Note:

# It will give this error if do not import service and work with service

# C:\Users\Titan Tech-2\PycharmProjects\SeleniumWithPython\MultiBrowser.py:8:
# DeprecationWarning: executable_path has been deprecated, please pass in a Service object
#   driver = webdriver.Chrome(executable_path="C:\Drivers\chromedriver_win32\chromedriver.exe")

# Solution:
# s = Service('C:\Drivers\chromedriver_win32\chromedriver.exe')
# driver = webdriver.Chrome(service=s)

############## Packages ################
from selenium import webdriver
from selenium.webdriver.common.by import By
import time
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support.ui import Select
import logging
import unittest
from selenium.webdriver import ActionChains


    print(driver.title) # Title of the page
    print(driver.current_url) # returns the url of the page
    print(driver.page_source) #HTML
    driver.close()  # Close the one tab of a browser
    driver.quit()   # close the total browser
# How to provide value into input boxes
    driver.find_element(By.ID, "RESULT_TextField-1").send_keys("Mustain")
    driver.maximize_window() # Make the browser window full
    driver.find_element_by_name("email")
    print(driver.is_displayed()) # returns true/false based of element status
    print(driver.is_enabled()) # returns true/false
    print(driver.is_selected()) # return true/false status
    driver.find_element_by_css_selector("input[value=roundtrip]") # Here, input is css tag and value=roundtrip is css selector
# Taking screenshot
    driver.save_screenshot("C:/Users/Titan Tech-2/PycharmProjects/SeleniumWithPython/output/google.png")
    driver.get_screenshot_as_file("C:/Users/Titan Tech-2/PycharmProjects/SeleniumWithPython/output/google2.png")
    # Note: png, jpg, jpeg etc any extension applicable
# Capture all the cookies created by browser
    cookies = driver.get_cookies()
# Adding new cookie to the browser
    cookie = {'name':'Mycookie', 'value': '12335364642'}
    driver.add_cookie(cookie)
# Deleting cookie
    driver.delete_cookie("Mycookie")
# Deleting all the cookie
    driver.delete_all_cookies() # deletes all cookies
# Double click on the button
    actions = ActionChains(driver)
    actions.double_click(element).perform()
# Code for preventing popup window in firefox while downloading
    fp.set_preference("browser.helperApps.neverAsk.saveToDisk", "text/plain, application/pdf")  # Mime type
    fp.set_preference("browser.download.manager.showWhenStarting", False)
    fp.set_preference("browser.download.dir", "C:\Users\Titan Tech-2\Downloads")
    fp.set_preference("browser.download.folderList", 2)
    fp.set_preference("pdfjs.disabled", True)
# Drag and Drop file
    actions = ActionChains(driver)
    actions.drag_and_drop(source_element, target_element).perform() # Drag and Drop
# Upload file
    driver.find_element_by_xpath("//*[@id='RESULT_FileUpload-10']").send_keys("C:/Users/Titan Tech-2/Pictures/flower.jpg")
# How to find out how many input-boxes present in web page
    input-boxes = driver.find_elements(By.CLASS_NAME, "text_field")
    print(len(input-boxes))   # 6
# Mouse hover operation
    actions = ActionChains(driver)
    actions.move_to_element(admin).move_to_element(usermgnt).move_to_element(users).click().perform()
# Mouse Right Click action
    actions = ActionChains(driver)
    actions.context_click(element).perform() # Mouse Right click action
# Navigation
    driver.back() # move to the previous page
    driver.forward() # move to the next page
# Alert window
    driver.switch_to_alert().accept() # closes alert window using "OK" button
    driver.switch_to_alert().dismiss() # closes alert window using  "No" button
# Clicking on the link (2 methods)
    # method - 1
    driver.find_element(By.LINK_TEXT, "Developers").click() # name have to be 100% correct
    # method - 2
    driver.find_element(By.PARTIAL_LINK_TEXT, "Develop").click() # name have to be 100% correct





# Implicitly Wait
    * applicable for all the elements of the page
    * specify one time in the beginning of the code
    driver.implicitly_wait(10)

# Explicit waits
    * based on the condition
    # waits maximum 10 sec if elements not found. If found then without waiting go next
    Code:
    wait = WebDriverWait(driver, 10)
    element = wait.until(EC.element_to_be_clickable(By.XPATH, ""))
    element.click()

# Dropdown
    from selenium.webdriver.support.ui import Select
    element = driver.find_element_by_id("RESULT_RadioButton-9")
    drp = Select(element)
   # ----- select one option (3 methods)-----
    # Select by visible text
    drp.select_by_visible_text("Morning") # Morning
    # # Select by index
    # drp.select_by_index(2) # Afternoon
    # # select by value
    # drp.select_by_value("Radio-2") # Evening
   # --------Count number of options----------
    print(len(drp.options))
   # ------ Capture all the options and print them as output ----------
    all_options = drp.options
    for option in all_options:
        print(option.text)


######### Data Driven testing ################
# Excel operations
    * Reading data from Excel file
    * Writing data from Excel file
    * Data driven test case